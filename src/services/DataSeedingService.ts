import { supabase } from '@/integrations/supabase/client';

export class DataSeedingService {
  static async seedSampleData() {
    console.log('üå± Starting data seeding...');
    
    try {
      // Create sample teacher profiles in teacher_profiles table
      const teacherProfiles = [
        {
          id: 'teacher-1',
          specialization: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
          experience_years: 5,
          education: '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
          languages: ['–†—É—Å—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'],
          skills: ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º'],
          location: '–ë–∏—à–∫–µ–∫',
          bio: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã',
          is_profile_complete: true,
          is_published: true,
          available: true
        },
        {
          id: 'teacher-2',
          specialization: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
          experience_years: 8,
          education: '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏',
          languages: ['–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π', '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π'],
          skills: ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º'],
          location: '–ë–∏—à–∫–µ–∫',
          bio: '–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
          is_profile_complete: true,
          is_published: true,
          available: true
        },
        {
          id: 'teacher-3',
          specialization: '–§–∏–∑–∏–∫–∞',
          experience_years: 12,
          education: '–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
          languages: ['–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π', '–†—É—Å—Å–∫–∏–π'],
          skills: ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ', '–ù–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞'],
          location: '–û—à',
          bio: '–î–æ–∫—Ç–æ—Ä —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –æ–ø—ã—Ç–Ω—ã–π –ø–µ–¥–∞–≥–æ–≥',
          is_profile_complete: true,
          is_published: true,
          available: true
        }
      ];

      // Create sample school profiles in school_profiles table
      const schoolProfiles = [
        {
          id: 'school-1',
          school_name: '–®–∫–æ–ª–∞ ‚Ññ1 –∏–º–µ–Ω–∏ –ê.–°. –ü—É—à–∫–∏–Ω–∞',
          school_type: '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞',
          description: '–û–¥–Ω–∞ –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö —à–∫–æ–ª –ë–∏—à–∫–µ–∫–∞ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π',
          address: '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 123, –ë–∏—à–∫–µ–∫',
          facilities: ['–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å'],
          founded_year: 1935,
          student_count: 450,
          is_published: true
        },
        {
          id: 'school-2',
          school_name: '–ì–∏–º–Ω–∞–∑–∏—è ‚Ññ2 —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
          school_type: '–ì–∏–º–Ω–∞–∑–∏—è',
          description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–∏–º–Ω–∞–∑–∏—è —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º –∏–∑—É—á–µ–Ω–∏–µ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤',
          address: '—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 45, –ë–∏—à–∫–µ–∫',
          facilities: ['–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞', '–°—Ç–æ–ª–æ–≤–∞—è'],
          founded_year: 1995,
          student_count: 320,
          is_published: true
        },
        {
          id: 'school-3',
          school_name: '–õ–∏—Ü–µ–π ‚Ññ3 —Å —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–∫–ª–æ–Ω–æ–º',
          school_type: '–õ–∏—Ü–µ–π',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏—Ü–µ–π –¥–ª—è –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π',
          address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, 78, –ë–∏—à–∫–µ–∫',
          facilities: ['–§–∏–∑–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç', '–ê–∫—Ç–æ–≤—ã–π –∑–∞–ª'],
          founded_year: 2005,
          student_count: 280,
          is_published: true
        }
      ];

      // Insert teacher profiles into teacher_profiles table
      console.log('üìù Inserting teacher profiles...');
      for (const teacher of teacherProfiles) {
        const { error } = await supabase
          .from('teacher_profiles')
          .upsert(teacher, { onConflict: 'id' });
        
        if (error) {
          console.error('‚ùå Error inserting teacher:', teacher.id, error);
        } else {
          console.log('‚úÖ Inserted teacher:', teacher.specialization);
        }
      }

      // Insert school profiles into school_profiles table
      console.log('üìù Inserting school profiles...');
      for (const school of schoolProfiles) {
        const { error } = await supabase
          .from('school_profiles')
          .upsert(school, { onConflict: 'id' });
        
        if (error) {
          console.error('‚ùå Error inserting school:', school.id, error);
        } else {
          console.log('‚úÖ Inserted school:', school.school_name);
        }
      }

      console.log('üéâ Data seeding completed!');
      return { success: true, message: 'Sample data created successfully' };

    } catch (error) {
      console.error('‚ùå Data seeding failed:', error);
      return { success: false, error: error };
    }
  }

  static async checkExistingData() {
    console.log('üîç Checking existing data...');
    
    try {
      const { data: teachers, error: teacherError } = await supabase
        .from('teacher_profiles')
        .select('*');

      const { data: schools, error: schoolError } = await supabase
        .from('school_profiles')
        .select('*');

      return {
        teachers: teachers?.length || 0,
        schools: schools?.length || 0,
        teacherError,
        schoolError
      };
    } catch (error) {
      console.error('‚ùå Error checking data:', error);
      return { teachers: 0, schools: 0, error };
    }
  }

  static async clearSampleData() {
    console.log('üóëÔ∏è Clearing sample data...');
    
    try {
      // Clear teacher profiles
      const { error: teacherError } = await supabase
        .from('teacher_profiles')
        .delete()
        .in('id', ['teacher-1', 'teacher-2', 'teacher-3']);

      if (teacherError) {
        console.error('‚ùå Error clearing teacher data:', teacherError);
      }

      // Clear school profiles
      const { error: schoolError } = await supabase
        .from('school_profiles')
        .delete()
        .in('id', ['school-1', 'school-2', 'school-3']);

      if (schoolError) {
        console.error('‚ùå Error clearing school data:', schoolError);
      }

      console.log('‚úÖ Sample data cleared!');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Error clearing data:', error);
      return { success: false, error };
    }
  }
} 