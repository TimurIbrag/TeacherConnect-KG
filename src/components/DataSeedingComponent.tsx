import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Sprout, Trash2, AlertTriangle } from 'lucide-react';
import { DataSeedingService } from '@/services/DataSeedingService';
import { useToast } from '@/hooks/use-toast';

const DataSeedingComponent: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [isClearing, setIsClearing] = useState(false);
  const [isClearingAll, setIsClearingAll] = useState(false);
  const [isFixingRecursion, setIsFixingRecursion] = useState(false);
  const [counts, setCounts] = useState({ teachers: 0, schools: 0 });
  const { toast } = useToast();

  const fetchCounts = async () => {
    const data = await DataSeedingService.checkExistingData();
    setCounts(data);
  };

  useEffect(() => {
    fetchCounts();
  }, []);

  const handleCreateSampleData = async () => {
    setIsLoading(true);
    try {
      const result = await DataSeedingService.seedSampleData();
      if (result.success) {
        toast({
          title: "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
          description: "–û–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã",
        });
        await fetchCounts();
      } else {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleClearSampleData = async () => {
    setIsClearing(true);
    try {
      const result = await DataSeedingService.clearSampleData();
      if (result.success) {
        toast({
          title: "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
          description: "–û–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã",
        });
        await fetchCounts();
      } else {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        variant: "destructive",
      });
    } finally {
      setIsClearing(false);
    }
  };

  const handleClearAllProfiles = async () => {
    if (!confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
      return;
    }

    setIsClearingAll(true);
    try {
      const result = await DataSeedingService.clearAllDefaultProfiles();
      if (result.success) {
        toast({
          title: "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
          description: "–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        });
        await fetchCounts();
      } else {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π",
        variant: "destructive",
      });
    } finally {
      setIsClearingAll(false);
    }
  };

  const handleFixRecursion = async () => {
    if (!confirm('üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ profiles? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
      return;
    }

    setIsFixingRecursion(true);
    try {
      const result = await DataSeedingService.fixProfilesTableRecursion();
      if (result.success) {
        toast({
          title: "‚úÖ –£—Å–ø–µ—à–Ω–æ!",
          description: "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞",
        });
        await fetchCounts();
      } else {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–∏",
        variant: "destructive",
      });
    } finally {
      setIsFixingRecursion(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          <Sprout className="inline w-6 h-6 text-green-600 mr-2" />
          –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ (–í—Ä–µ–º–µ–Ω–Ω—ã–π)
        </h2>
        <p className="text-gray-600">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Current Status */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex justify-between items-center">
              <span>–£—á–∏—Ç–µ–ª—è:</span>
              <span className="font-semibold text-blue-600">{counts.teachers}</span>
            </div>
            <div className="flex justify-between items-center">
              <span>–®–∫–æ–ª—ã:</span>
              <span className="font-semibold text-green-600">{counts.schools}</span>
            </div>
            <Button 
              onClick={fetchCounts} 
              variant="outline" 
              size="sm" 
              className="w-full"
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </CardContent>
        </Card>

        {/* Actions */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              ‚ö° –î–µ–π—Å—Ç–≤–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <Button
              onClick={handleCreateSampleData}
              disabled={isLoading}
              className="w-full bg-green-600 hover:bg-green-700"
            >
              <Sprout className="w-4 h-4 mr-2" />
              {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'}
            </Button>
            
            <Button
              onClick={handleClearSampleData}
              disabled={isClearing}
              variant="outline"
              className="w-full"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              {isClearing ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'}
            </Button>

            <Button
              onClick={handleClearAllProfiles}
              disabled={isClearingAll}
              variant="destructive"
              className="w-full"
            >
              <AlertTriangle className="w-4 h-4 mr-2" />
              {isClearingAll ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ—Ñ–∏–ª–∏'}
            </Button>

            <Button
              onClick={handleFixRecursion}
              disabled={isFixingRecursion}
              variant="outline"
              className="w-full bg-yellow-50 border-yellow-200 text-yellow-800 hover:bg-yellow-100"
            >
              <AlertTriangle className="w-4 h-4 mr-2" />
              {isFixingRecursion ? '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...' : '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é profiles'}
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* What this does */}
      <Card>
        <CardHeader>
          <CardTitle>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc list-inside space-y-2 text-gray-700">
            <li>–°–æ–∑–¥–∞–µ—Ç 5 –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∏—Ç–µ–ª–µ–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
            <li>–°–æ–∑–¥–∞–µ—Ç 5 –æ–±—Ä–∞–∑—Ü–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —à–∫–æ–ª —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</li>
            <li>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</li>
            <li>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ã—Ä–≥—ã–∑—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏</li>
            <li>–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–≤–∫–ª—é—á–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)</li>
            <li>–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
};

export { DataSeedingComponent }; 